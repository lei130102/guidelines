<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>dlg_iterator</class>
 <widget class="QDialog" name="dlg_iterator">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>1408</width>
    <height>807</height>
   </rect>
  </property>
  <property name="windowTitle">
   <string>Dialog</string>
  </property>
  <layout class="QHBoxLayout" name="horizontalLayout">
   <item>
    <widget class="QSplitter" name="splitter">
     <property name="orientation">
      <enum>Qt::Horizontal</enum>
     </property>
     <widget class="QGroupBox" name="groupBox">
      <property name="title">
       <string/>
      </property>
     </widget>
     <widget class="QGroupBox" name="groupBox_2">
      <property name="title">
       <string/>
      </property>
      <layout class="QVBoxLayout" name="verticalLayout">
       <item>
        <widget class="QScrollArea" name="scrollArea">
         <property name="widgetResizable">
          <bool>true</bool>
         </property>
         <widget class="QWidget" name="scrollAreaWidgetContents">
          <property name="geometry">
           <rect>
            <x>0</x>
            <y>-6066</y>
            <width>1122</width>
            <height>7252</height>
           </rect>
          </property>
          <layout class="QVBoxLayout" name="verticalLayout_2">
           <item>
            <widget class="QGroupBox" name="groupBox_3">
             <property name="title">
              <string/>
             </property>
             <layout class="QGridLayout" name="gridLayout">
              <item row="0" column="0">
               <widget class="QLabel" name="label">
                <property name="text">
                 <string>//简单地说，迭代器就是迭代器类类型和指针类型

//迭代器是容器提供给算法的接口，算法不在乎他所处理的元素来自何种容器，但是在意传给他作为参数的迭代器的类型

//迭代器类型：
//输入迭代器(input iterator)(input_iterator_tag)
//输出迭代器(output iterator)(output_iterator_tag)
//前向迭代器(forward iterator)(forward_iterator_tag)
//双向迭代器(bidirectional iterator)(bidirectional_iterator_tag)
//随机访问迭代器(random-access iterator)(random_access_iterator_tag)
namespace std
{
    struct input_iterator_tag
    {};

    struct output_iterator_tag
    {};

    struct forward_iterator_tag : input_iterator_tag
    {};

    struct bidirectional_iterator_tag : forward_iterator_tag
    {};

    struct random_access_iterator_tag : bidirectional_iterator_tag
    {};
}</string>
                </property>
               </widget>
              </item>
             </layout>
            </widget>
           </item>
           <item>
            <widget class="QGroupBox" name="groupBox_4">
             <property name="title">
              <string/>
             </property>
             <layout class="QGridLayout" name="gridLayout_2">
              <item row="0" column="0">
               <widget class="QLabel" name="label_2">
                <property name="text">
                 <string>//定义使用迭代器的算法1
template&lt;typename Iter&gt;
void my_swap(Iter a, Iter b)
{
    auto tmp = *a;  //使用auto，但不好，没有明确迭代器参数所指向值的类型
    *a = *b;
    *b = tmp;
}

template&lt;typename Iter&gt;
void my_swap(Iter a, Iter b)
{
    typename Iter::value_type tmp = *a;  //使用typename Iter::value_type，(这要求迭代器类型必须定义value_type类型)，但仍有限制，导致Iter不能是指针
    *a = *b;
    *b = tmp;
}

#include &lt;iterator&gt;
template&lt;typename Iter&gt;
void my_swap(Iter a, Iter b)
{
    typename std::iterator_traits&lt;Iter&gt;::value_type tmp = *a;  //使用typename std::iterator_traits&lt;Iter&gt;::value_type最好
    *a = *b;
    *b = tmp;
}

//iterator_traits模板定义如下：
template&lt;class Iterator&gt;
struct iterator_traits
{
    typedef typename Iterator::difference_type     difference_type;
    typedef typename Iterator::value_type          value_type;
    typedef typename Iterator::pointer             pointer;
    typedef typename Iterator::reference           reference;
    typedef typename Iterator::iterator_category   iterator_category;
};
//(这要求使用iterator_traits模板的迭代器类型必须定义difference_type、value_type、pointer、reference和iterator_category类型)
//(对于输出迭代器，除了iterator_category，其他别名都可以定义为void，这是因为输出迭代器指向对象的目的地址而不是对象)

//iterator_traits模板偏特化类型T*和const T*的定义
template&lt;class T&gt;
struct iterator_traits&lt;T*&gt;
{
    typedef ptrdiff_t                   difference_type;
    typedef T                           value_type;
    typedef T*                          pointer;
    typedef T&amp;                          reference;
    typedef random_access_iterator_tag  iterator_category;
};

template&lt;class T&gt;
struct iterator_traits&lt;const T*&gt;
{
    typedef ptrdiff_t                   difference_type;
    typedef T                           value_type;
    typedef const T*                    pointer;
    typedef const T&amp;                    reference;
    typedef random_access_iterator_tag  iterator_category;
};



//定义使用迭代器的算法2
template&lt;typename Iter&gt;
inline void func(Iter begin, Iter end)
{
    func(begin, end, std::iterator_traits&lt;Iter&gt;::iterator_category());
}

template&lt;typename BiIterator&gt;
void func(BiIterator begin, BiIterator end, std::bidirectional_iterator_tag)
{
    //...
}

template&lt;typename RaIterator&gt;
void func(RaIterator begin, RaIterator end, std::random_access_iterator_tag)
{
    //...
}

//定义使用迭代器的算法3
//尽量使用迭代器相关辅助函数，这样写出的算法能适应更多类型的迭代器(容忍随机访问迭代器使用辅助函数带来的性能降低)

//void advance(InputIterator&amp; pos, Dist n)
//令名为pos的输入迭代器前进(或后退)n个元素
//对于随机访问迭代器和双向迭代器而言，n可为负值，表示向后退
//Dist通常是整数类型，要有&lt; ++ --等操作，还要和0作比较
//对于随机访问迭代器，则调用pos+=n，因此具有常数复杂度；对于双向迭代器，则调用++pos(或--pos)n次，因此具有线性复杂度

//ForwardIterator next(ForwardIterator pos)
//ForwardIterator next(ForwardIterator pos, Dist n)
//令名为pos的前向迭代器前进1或者n个位置
//对于随机访问迭代器和双向迭代器而言，n可为负值，表示向后退
//Dist是类型std::iterator_traits&lt;BidirectionalIterator&gt;::difference_type

//BidirectionalIterator prev(BidirectionalIterator pos)
//BidirectionalIterator prev(BidirectionalIterator pos, Dist n)
//令名为pos的前向迭代器后退1或n个位置
//对于随机访问迭代器和双向迭代器而言，n可为负值，表示向前进
//Dist是类型std::iterator_traits&lt;BidirectionalIterator&gt;::difference_type

//Dist distance(InputIterator pos1, InputIterator pos2)
//返回两个输入迭代器的距离
//Dist是类型std::iterator_traits&lt;InputIterator&gt;::difference_type
//对于随机访问迭代器，则调用pos2-pos1，因此具有常数复杂度；对于其他迭代器，则不断递增pos1，直到抵达pos2为止，因此具有线性复杂度

//void iter_swap(ForwardIterator1 pos1, ForwardIterator2 pos2)
//交换迭代器pos1和pos2所指的值    (注意，是迭代器所指向的值)
//迭代器的类型不必相同，但是其所指向的两个值必须可以相互赋值</string>
                </property>
               </widget>
              </item>
             </layout>
            </widget>
           </item>
           <item>
            <widget class="QGroupBox" name="groupBox_6">
             <property name="title">
              <string/>
             </property>
             <layout class="QGridLayout" name="gridLayout_4">
              <item row="0" column="0">
               <widget class="QLabel" name="label_4">
                <property name="text">
                 <string>    std::vector&lt;int&gt; v{5, 4, 3, 2, 1};
    std::sort(++v.begin(), v.end());

    std::copy(v.begin(), v.end(), std::ostream_iterator&lt;int&gt;(std::cout, &quot; &quot;));</string>
                </property>
               </widget>
              </item>
              <item row="1" column="0">
               <widget class="QPushButton" name="pbVectorArrayStringIterator">
                <property name="text">
                 <string>执行</string>
                </property>
               </widget>
              </item>
             </layout>
            </widget>
           </item>
           <item>
            <widget class="QGroupBox" name="groupBox_5">
             <property name="title">
              <string/>
             </property>
             <layout class="QGridLayout" name="gridLayout_3">
              <item row="0" column="0">
               <widget class="QLabel" name="label_3">
                <property name="text">
                 <string>//不同类型的迭代器需要为迭代器类定义不同的成员函数集，因为迭代器类型具有叠加性，所以成员函数集也具有叠加性

//1.输入迭代器     容器：istream
//iter(iter const&amp;）(复制构造函数)
//*iter         (读取实际元素)
//iter-&gt;member  (读取实际元素的成员，如果有的话)
//++iter
//iter++        (不一定得返回什么东西，不过通常会返回旧位置)
//iter1 == iter2
//iter1 != iter2

//2.输出迭代器     容器：ostream、inserter
//iter(iter const&amp;）(复制构造函数)
//*iter = val
//++iter
//iter++

//3.前向迭代器      容器：forward list、unordered containers(有一部分是双向迭代器)
//输入迭代器的
//iter()        (默认构造函数)
//iter1 = iter2

//4.双向迭代器       容器：list、set、multiset、map、multimap
//前向迭代器的
//--iter
//iter--

//5.随机访问迭代器     容器：array、vector、deque、string、C-Style array
//双向迭代器的
//iter[n]
//iter+=n
//iter-=n
//iter+n
//n+iter
//iter-n
//iter1-iter2
//iter1 &lt; iter2
//iter1 &gt; iter2
//iter1 &lt;= iter2
//iter1 &gt;= iter2</string>
                </property>
               </widget>
              </item>
             </layout>
            </widget>
           </item>
           <item>
            <widget class="QGroupBox" name="groupBox_7">
             <property name="title">
              <string>前向迭代器 numeric_range numeric_iterator</string>
             </property>
             <layout class="QGridLayout" name="gridLayout_5">
              <item row="0" column="0">
               <widget class="QLabel" name="label_5">
                <property name="text">
                 <string>    numeric_range&lt;double&gt; range{1.5, 0.5, 5};
    auto first = range.begin();
    auto last = range.end();
    std::copy(first, last, std::ostream_iterator&lt;double&gt;(std::cout, &quot; &quot;));
    std::cout &lt;&lt; &quot;\n&quot;;</string>
                </property>
               </widget>
              </item>
              <item row="1" column="0">
               <widget class="QPushButton" name="pbNumericRangeCopy">
                <property name="text">
                 <string>执行</string>
                </property>
               </widget>
              </item>
              <item row="2" column="0">
               <widget class="QLabel" name="label_6">
                <property name="text">
                 <string>    numeric_range&lt;double&gt; range{1.5, 0.5, 5};
    std::cout &lt;&lt; &quot;Sum = &quot; &lt;&lt; std::accumulate(std::begin(range), std::end(range), 0.0) &lt;&lt; &quot;\n&quot;;</string>
                </property>
               </widget>
              </item>
              <item row="3" column="0">
               <widget class="QPushButton" name="pbNumericRangeAccumulate">
                <property name="text">
                 <string>执行</string>
                </property>
               </widget>
              </item>
              <item row="4" column="0">
               <widget class="QLabel" name="label_7">
                <property name="text">
                 <string>    numeric_range&lt;double&gt; range{1.5, 0.5, 5};
    for(auto n : range)
    {
        std::cout &lt;&lt; n &lt;&lt; &quot; &quot;;
    }
    std::cout &lt;&lt; &quot;\n&quot;;</string>
                </property>
               </widget>
              </item>
              <item row="5" column="0">
               <widget class="QPushButton" name="pbNumericRangeFor">
                <property name="text">
                 <string>执行</string>
                </property>
               </widget>
              </item>
             </layout>
            </widget>
           </item>
           <item>
            <widget class="QGroupBox" name="groupBox_8">
             <property name="title">
              <string/>
             </property>
             <layout class="QVBoxLayout" name="verticalLayout_3">
              <item>
               <widget class="QLabel" name="label_8">
                <property name="text">
                 <string>//迭代器适配器(iterator adapter):
//反向迭代器(reverse iterator)
//插入迭代器(insert iterator)
//流迭代器(stream iterator)
//移动迭代器(move iterator)

//1.
//反向迭代器(reverse iterator)</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QLabel" name="label_9">
                <property name="text">
                 <string>std::vector&lt;int&gt; v {1, 2, 3, 4, 5, 6, 7, 8, 9};

std::copy(v.begin(), v.end(), std::ostream_iterator&lt;int&gt;(std::cout, &quot; &quot;));
std::cout &lt;&lt; &quot;\n&quot;;
std::copy(v.rbegin(), v.rend(), std::ostream_iterator&lt;int&gt;(std::cout, &quot; &quot;));
std::cout &lt;&lt; &quot;\n&quot;;</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QPushButton" name="pbReverseIterator">
                <property name="text">
                 <string>执行</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QLabel" name="label_10">
                <property name="text">
                 <string>std::vector&lt;int&gt;::iterator pos = std::find(v.begin(), v.end(), 2);
std::cout &lt;&lt; &quot;pos:&quot; &lt;&lt; *pos &lt;&lt; &quot;\n&quot;;
//iterator转reverse_iterator
std::vector&lt;int&gt;::reverse_iterator pos_left(pos);//注意reverse_iterator的构造方式
std::cout &lt;&lt; &quot;pos_left:&quot; &lt;&lt; *pos_left &lt;&lt; &quot;\n&quot;;</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QPushButton" name="pbIteratorToReverseIterator">
                <property name="text">
                 <string>执行</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QLabel" name="label_11">
                <property name="text">
                 <string>std::vector&lt;int&gt;::reverse_iterator pos = std::find(v.rbegin(), v.rend(), 2);//注意参数类型决定返回值类型
std::cout &lt;&lt; &quot;pos:&quot; &lt;&lt; *pos &lt;&lt; &quot;\n&quot;;
//reverse_iterator转iterator
std::vector&lt;int&gt;::iterator pos_right(pos.base());
std::cout &lt;&lt; &quot;pos_right:&quot; &lt;&lt; *pos_right &lt;&lt; &quot;\n&quot;;</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QPushButton" name="pbReverseIteratorToIterator">
                <property name="text">
                 <string>执行</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QLabel" name="label_12">
                <property name="text">
                 <string>//iterator、const_iterator、reverse_iterator、const_reverse_iterator相互转换

//1.隐式转换
//iterator----------------------------&gt;const_iterator
//   |
//   |
//   +---&gt;reverse_iterator------------&gt;const_reverse_iterator

//2.base()转换
//reverse_iterator::base() -----&gt; iterator
//const_reverse_iterator::base()  ------&gt; const_iterator

//3.const_iterator通过distance和advance函数 ------&gt; iterator
//(对于随机访问迭代器，是常数时间的操作；对于双向迭代器，是线性时间的操作)</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QLabel" name="label_14">
                <property name="text">
                 <string>//2.
//插入迭代器 (insert iterator)
//(所有插入迭代器都是输出迭代器(output iterator)，与输出迭代器不同的是，&quot;*pos = value&quot;也可以写为&quot;pos = value&quot;，因为operator*是无操作(另外，operator++()和operator++(int)也是无操作))
//(输出迭代器的常用方式是&quot;*iter++ = value&quot;，插入迭代器的另一种常用方式是&quot;iter = value&quot;)

//std::back_inserter_iterator
//对应：push_back(value)
//适用容器：std::vector std::deque std::list std::string
//辅助函数：std::back_inserter(container)

//std::front_inserter_iterator
//对应：push_front(value)
//适用容器：std::deque std::list
//辅助函数：std::front_inserter(container)

//std::inserter_iterator
//对应：insert(pos, value)
//适用容器：除了std::array和std:forward_list
//辅助函数：std::inserter(container, pos)</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QLabel" name="label_13">
                <property name="text">
                 <string>    std::vector&lt;int&gt; v;

    std::back_insert_iterator&lt;std::vector&lt;int&gt;&gt; bii(v);
    //调用作为输出迭代器的接口
    *bii++ = 1;
    *bii++ = 2;
    *bii++ = 3;
    //插入迭代器的operator*和operator++、operator++(int)都是无操作，所以可以
    bii = 4;
    bii = 5;
    bii = 6;

    std::copy(v.begin(), v.end(), std::ostream_iterator&lt;int&gt;(std::cout, &quot; &quot;));
    std::cout &lt;&lt; &quot;\n&quot;;</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QPushButton" name="pbBackInsertIterator">
                <property name="text">
                 <string>执行</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QLabel" name="label_15">
                <property name="text">
                 <string>    std::vector&lt;int&gt; v;
    int n = 0;

    std::generate_n(std::back_insert_iterator&lt;std::vector&lt;int&gt;&gt;(v), 10, [n]() mutable{return ++n;});

    std::copy(v.begin(), v.end(), std::ostream_iterator&lt;int&gt;(std::cout, &quot; &quot;));
    std::cout &lt;&lt; &quot;\n&quot;;</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QPushButton" name="pbBackInsertIteratorGenerate_n">
                <property name="text">
                 <string>执行</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QLabel" name="label_16">
                <property name="text">
                 <string>    std::vector&lt;int&gt; v{1,2,3,4,5};

    v.reserve(2 * v.size()); //注意！一定要在调用copy之前确保有足够大的空间，因为插入元素时可能会造成指向v的其他迭代器失效
    std::copy(v.begin(), v.end(), std::back_inserter(v));
//    template&lt;class InputIt, class OutputIt&gt;
//    OutputIt copy(InputIt first, InputIt last,
//                  OutputIt d_first)
//    {
//        while (first != last) {
//            *d_first++ = *first++;
//        }
//        return d_first;
//    }

    std::copy(v.begin(), v.end(), std::ostream_iterator&lt;int&gt;(std::cout, &quot; &quot;));
    std::cout &lt;&lt; &quot;\n&quot;;</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QPushButton" name="pbBackInsertIteratorCopy">
                <property name="text">
                 <string>执行</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QLabel" name="label_17">
                <property name="text">
                 <string>    std::list&lt;int&gt; l;

    ////使用std::front_insert_iterator模板类
    std::front_insert_iterator&lt;std::list&lt;int&gt;&gt; fii(l);
    //调用作为输出迭代器的接口
    *fii++ = 1;
    *fii++ = 2;
    *fii++ = 3;
    //插入迭代器的operator*和operator++、operator++(int)都是无操作，所以可以
    fii = 4;
    fii = 5;
    fii = 6;

    ////使用std::front_inserter辅助函数
    std::front_inserter(l) = 7;
    std::front_inserter(l) = 8;

    std::copy(l.begin(), l.end(), std::ostream_iterator&lt;int&gt;(std::cout, &quot; &quot;));
    std::cout &lt;&lt; &quot;\n&quot;;</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QPushButton" name="pbFrontInsertIterator">
                <property name="text">
                 <string>执行</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QLabel" name="label_18">
                <property name="text">
                 <string>    std::set&lt;int&gt; s;

    ////使用std::insert_iterator模板类
    std::insert_iterator&lt;std::set&lt;int&gt;&gt; ii(s, s.begin());
    //调用作为输出迭代器的接口
    *ii++ = 1;
    *ii++ = 2;
    *ii++ = 3;
    //插入迭代器的operator*和operator++、operator++(int)都是无操作，所以可以
    ii = 4;
    ii = 5;
    ii = 6;

    ////使用std::inserter辅助函数
    std::inserter(s, s.end()) = 7;
    std::inserter(s, s.end()) = 8;

    std::copy(s.begin(), s.end(), std::ostream_iterator&lt;int&gt;(std::cout, &quot; &quot;));
    std::cout &lt;&lt; &quot;\n&quot;;</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QPushButton" name="pbInsertIterator">
                <property name="text">
                 <string>执行</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QLabel" name="label_22">
                <property name="text">
                 <string>//3.
//流迭代器(stream iterator)

//输入流迭代器是一种输入迭代器(input iterator)
//(输入流迭代器与输出迭代器不同的是，&quot;variable = *pos&quot;也可以写为&quot;variable = pos&quot;，因为operator*是无操作(另外，operator++()和operator++(int)也是无操作))
//(输入迭代器的常用方式是&quot;variable = *iter++&quot;，插入迭代器的另一种常用方式是&quot;variable = iter&quot;)

//输出流迭代器是一种输出迭代器(output iterator)

//std::istream_iterator  (默认构造的是end())
//std::ostream_iterator

//std::istreambuf_iterator (默认构造的是end())
//std::ostreambuf_iterator

//std::istreambuf_iterator比std::istream_iterator更有效率，因为他避免对每个字符构造并析构一次sentry对象的开销
//读字符时，std::istream_iterator默认跳过空白字符(除非用std::noskipws或等价物禁用)，而std::istreambuf_iterator不跳过

//对于逐个字符的输入考虑使用std::istreambuf_iterator</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QLabel" name="label_19">
                <property name="text">
                 <string>    std::ostream_iterator&lt;int&gt; writer(std::cout, &quot; &quot;);
    //调用作为输出迭代器的接口
    *writer++ = 1;
    *writer++ = 2;
    *writer++ = 3;
    //输出流迭代器的operator*和operator++、operator++(int)都是无操作，所以可以
    writer = 4;
    writer = 5;
    writer = 6;

    std::cout &lt;&lt; &quot;\n&quot;;

    std::vector&lt;int&gt; v{1,2,3,4,5,6,7,8,9};
    std::copy(v.begin(), v.end(), std::ostream_iterator&lt;int&gt;(std::cout));
    //    template&lt;class InputIt, class OutputIt&gt;
    //    OutputIt copy(InputIt first, InputIt last,
    //                  OutputIt d_first)
    //    {
    //        while (first != last) {
    //            *d_first++ = *first++;
    //        }
    //        return d_first;
    //    }

    std::cout &lt;&lt; &quot;\n&quot;;</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QPushButton" name="pbOstreamIterator">
                <property name="text">
                 <string>执行</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QLabel" name="label_20">
                <property name="text">
                 <string>    std::istream_iterator&lt;int&gt; reader(std::cin);
    std::istream_iterator&lt;int&gt; readerEOF;//默认构造函数创建end()

    while(reader != readerEOF)
    {
        //调用作为输入迭代器的接口
        std::cout &lt;&lt; *reader++ &lt;&lt; &quot;\n&quot;;
        //输入流迭代器的operator*和operator++、operator++(int)都是无操作，所以可以
        //std::cout &lt;&lt; reader &lt;&lt; &quot;\n&quot;;
    }</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QPushButton" name="pbIstreamIterator">
                <property name="text">
                 <string>执行</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QLabel" name="label_21">
                <property name="text">
                 <string>    std::istream_iterator&lt;std::string&gt; reader(std::cin);
    std::ostream_iterator&lt;std::string&gt; writer(std::cout , &quot; &quot;);

    while(reader != std::istream_iterator&lt;std::string&gt;())
    {
        //每次跳过前两个字符串
        std::advance(reader, 2);

        //重新判断
        if(reader != std::istream_iterator&lt;std::string&gt;())
        {
            *writer++ = *reader++;
        }
    }
</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QPushButton" name="pbOstreamIteratorIstreamIterator">
                <property name="text">
                 <string>执行</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QLabel" name="label_26">
                <property name="text">
                 <string>    std::string filepath = &quot;123.txt&quot;;

    std::vector&lt;std::string&gt; v{&quot;1&quot;, &quot;2&quot;, &quot;3&quot;};

    std::ofstream of(filepath);//of创建时自动执行open，of析构时自动执行close
    std::copy(v.begin(), v.end(), std::ostream_iterator&lt;std::string&gt;(of, &quot;\n&quot;));</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QPushButton" name="pbOfstreamOstreamIterator">
                <property name="text">
                 <string>执行</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QLabel" name="label_27">
                <property name="text">
                 <string>    std::string filepath = &quot;123.txt&quot;;

    std::ifstream ifs(filepath);
    ifs.unsetf(std::ios::skipws);//进制忽略文件中的空白字符

    //std::string filedata(std::istream_iterator&lt;char&gt;(ifs), std::istream_iterator&lt;char&gt;());//编译器会认为是函数声明
    std::string filedata((std::istream_iterator&lt;char&gt;(ifs)), (std::istream_iterator&lt;char&gt;()));

    std::cout &lt;&lt; filedata &lt;&lt; &quot;\n&quot;;

    //std::istream_iterator&lt;char&gt;对象使用operator&gt;&gt;从输入流中读取单个字符，而istreambuf_iterator&lt;char&gt;
    //则直接从流的缓冲区中读取下一个字符
    //std::istreambuf_iterator&lt;char&gt;对象从一个输入流istream s中读取下一个字符的操作是通过s.rdbuf()-&gt;sgetc()来完成的</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QPushButton" name="pbIfstreamIstreamIterator">
                <property name="text">
                 <string>执行</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QLabel" name="label_28">
                <property name="text">
                 <string>    std::string filepath = &quot;123.txt&quot;;

    std::ifstream ifs(filepath);

    //std::string filedata(std::istreambuf_iterator&lt;char&gt;(ifs), std::istreambuf_iterator&lt;char&gt;());//编译器会认为是函数声明
    std::string filedata((std::istreambuf_iterator&lt;char&gt;(ifs)), (std::istreambuf_iterator&lt;char&gt;()));

    std::cout &lt;&lt; filedata &lt;&lt; &quot;\n&quot;;</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QPushButton" name="pbIfstreamIstreambufIterator">
                <property name="text">
                 <string>执行</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QLabel" name="label_23">
                <property name="text">
                 <string>//4.
//移动迭代器(move iterator)
//移动迭代器(至少)是一个输入迭代器

//std::move_iterator

//辅助函数
//std::make_move_iterator</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QLabel" name="label_24">
                <property name="text">
                 <string>    std::vector&lt;std::string&gt; v{&quot;this&quot;, &quot;is&quot;, &quot;an&quot;, &quot;example&quot;};

    typedef std::vector&lt;std::string&gt;::iterator iter_t;
    std::string result = std::accumulate(
                            std::move_iterator&lt;iter_t&gt;(v.begin()),
                            std::move_iterator&lt;iter_t&gt;(v.end()),
                            std::string()
                );

    std::cout &lt;&lt; &quot;result:&quot; &lt;&lt; result &lt;&lt; &quot;\n&quot;;
    std::cout &lt;&lt; &quot;v:&quot;;
    std::copy(v.begin(), v.end(), std::ostream_iterator&lt;std::string&gt;(std::cout, &quot; &quot;));</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QPushButton" name="pbMoveIterator">
                <property name="text">
                 <string>执行</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QLabel" name="label_25">
                <property name="text">
                 <string>    std::vector&lt;std::string&gt; v{&quot;this&quot;, &quot;is&quot;, &quot;an&quot;, &quot;example&quot;};

    typedef std::vector&lt;std::string&gt;::iterator iter_t;
    std::string result = std::accumulate(
                            std::make_move_iterator(v.begin()),
                            std::make_move_iterator(v.end()),
                            std::string()
                );

    std::cout &lt;&lt; &quot;result:&quot; &lt;&lt; result &lt;&lt; &quot;\n&quot;;
    std::cout &lt;&lt; &quot;v:&quot;;
    std::copy(v.begin(), v.end(), std::ostream_iterator&lt;std::string&gt;(std::cout, &quot; &quot;));</string>
                </property>
               </widget>
              </item>
              <item>
               <widget class="QPushButton" name="pbMakeMoveIterator">
                <property name="text">
                 <string>执行</string>
                </property>
               </widget>
              </item>
             </layout>
            </widget>
           </item>
           <item>
            <spacer name="verticalSpacer">
             <property name="orientation">
              <enum>Qt::Vertical</enum>
             </property>
             <property name="sizeHint" stdset="0">
              <size>
               <width>20</width>
               <height>230</height>
              </size>
             </property>
            </spacer>
           </item>
          </layout>
         </widget>
        </widget>
       </item>
      </layout>
     </widget>
    </widget>
   </item>
  </layout>
 </widget>
 <resources/>
 <connections/>
</ui>
